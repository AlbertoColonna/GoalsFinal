package com.sap.coe.sf;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;



/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.6 in JDK 6 Generated
 * source version: 2.1
 * 
 */
@WebServiceClient(	name = "SFAPIService",
					targetNamespace = "urn:server.sfapi.successfactors.com",
					wsdlLocation = "file:/E:/data/workspaces/hana/WoCHCE/etc/api012.wsdl")
public class SFAPIService extends Service
{
	
	private final static URL SFAPISERVICE_WSDL_LOCATION;
	private final static String SF_URN = "urn:server.sfapi.successfactors.com";
	private final static Logger logger = Logger
			.getLogger(com.sap.coe.sf.SFAPIService.class.getName());
	
	static
	{
		URL url = null;
		try
		{
			URL baseUrl;
			baseUrl = com.sap.coe.sf.SFAPIService.class.getResource(".");
			url = new URL(baseUrl,
					"file:/E:/data/workspaces/hana/WoCHCE/etc/api012.wsdl");
		}
		catch (MalformedURLException e)
		{
			logger.warning("Failed to create URL for the wsdl Location: 'file:/E:/data/workspaces/hana/WoCHCE/etc/api012.wsdl', retrying as a local file");
			logger.warning(e.getMessage());
		}
		SFAPISERVICE_WSDL_LOCATION = url;
	}
	
	
	public SFAPIService(URL wsdlLocation, QName serviceName)
	{
		super(wsdlLocation, serviceName);
	}
	
	
	public SFAPIService()
	{
		super(SFAPISERVICE_WSDL_LOCATION, new QName(SF_URN, "SFAPIService"));
	}
	
	
	/**
	 * 
	 * @return returns SFAPI
	 */
	@WebEndpoint(name = "SFAPI")
	public SFAPI getSFAPI()
	{
		return super.getPort(new QName(SF_URN, "SFAPI"), SFAPI.class);
	}
	
	
	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns SFAPI
	 */
	@WebEndpoint(name = "SFAPI")
	public SFAPI getSFAPI(WebServiceFeature... features)
	{
		return super.getPort(new QName(SF_URN, "SFAPI"), SFAPI.class, features);
	}
}
